// Mocks generated by Mockito 5.4.4 from annotations
// in hamropasalmobile/test/home/favorite_unit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:hamropasalmobile/core/failure/failure.dart' as _i5;
import 'package:hamropasalmobile/features/home/domain/entity/favorite_entity.dart'
    as _i6;
import 'package:hamropasalmobile/features/home/domain/entity/product_entity.dart'
    as _i7;
import 'package:hamropasalmobile/features/home/domain/use_case/favorite_usecase.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FavoriteUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFavoriteUseCase extends _i1.Mock implements _i3.FavoriteUseCase {
  @override
  _i4.Future<
      _i2.Either<_i5.Failure,
          List<_i6.FavoriteEntity>>> getFromFavorite() => (super.noSuchMethod(
        Invocation.method(
          #getFromFavorite,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.FavoriteEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.FavoriteEntity>>(
          this,
          Invocation.method(
            #getFromFavorite,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.FavoriteEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.FavoriteEntity>>(
          this,
          Invocation.method(
            #getFromFavorite,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.FavoriteEntity>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> removeFromFavorite(
          _i7.ProductEntity? favoriteEntity) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeFromFavorite,
          [favoriteEntity],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #removeFromFavorite,
            [favoriteEntity],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, void>>.value(
                _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #removeFromFavorite,
            [favoriteEntity],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.FavoriteEntity>>> addToFavorite(
          _i7.ProductEntity? favoriteEntity) =>
      (super.noSuchMethod(
        Invocation.method(
          #addToFavorite,
          [favoriteEntity],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.FavoriteEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.FavoriteEntity>>(
          this,
          Invocation.method(
            #addToFavorite,
            [favoriteEntity],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.FavoriteEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.FavoriteEntity>>(
          this,
          Invocation.method(
            #addToFavorite,
            [favoriteEntity],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.FavoriteEntity>>>);
}
